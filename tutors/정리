--고객관리
CREATE TABLE customer(
    id NUMBER CONSTRAINT customer_id_pk PRIMARY KEY,
    name VARCHAR2(50) NOT NULL,
    gender VARCHAR2(3) DEFAULT '남',
    email VARCHAR2(50),
    phone VARCHAR2(13)
);

CREATE SEQUENCE seq_customer
START WITH 1 INCREMENT BY 1;

INSERT INTO customer(id, name, email, phone) 
VALUES(SEQ_CUSTOMER.nextval, '홍길동', 'hong@naver.com', '010-1234-5678');

COMMIT;

SELECT * FROM customer;

--customer 테이블의 id 컬럼에 seq_customer의 nextval 가 자동으로 적용이 되도록 하려면
--trigger 를 만들어 사용하자.


사용자의 브라우저를 통한 요청
-> Controller
-> Service
-> DAO
-> VO(데이터객체)


===header.jsp===
<!-- href의 자바 부분은 작업하는 동안 css가 실시간으로 갱신되게 해주는것 -->
<link rel="stylesheet" type="text/css" href='css/common.css?v=<%=new java.util.Date().getTime() %>'/>

===root-context.xml===
<import resource="classpath:data/default.xml"/> 추가


===web.xml===(한글 인코딩)
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


src/main/resources파일에 패키지 추가 후 만들기
===db.properties===
db.driver = oracle.jdbc.driver.OracleDriver
db.url = jdbc:oracle:thin:@localhost:1521:xe
db.username = hanul
db.password = 0000


===default.xml===
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

<context:property-placeholder
	location="classpath:data/db.properties"/>

<!-- DBCP 객체 -->
<bean id="dbcp" class="org.apache.commons.dbcp.BasicDataSource">
	<property name="driverClassName" value="${db.driver}"/>
	<property name="url" value="${db.url}"/>
	<property name="username" value="${db.username}"/>
	<property name="password" value="${db.password}"/>
</bean>

<!-- mybatis 객체 -->
<bean id="factory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dbcp"/>
	<property name="mapperLocations" value="classpath:sqlmap/*-mapper.xml"/>
</bean>

<!-- 쿼리문 실행 객체 -->
<bean class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg name="sqlSessionFactory" ref="factory"/>
</bean>

</beans>

===pom.xml===(DB연동)
<!-- DB연결하려면 총 5개가 필요함 -->
		
		<!-- mvnrepository.com -->
		<!-- 스프링용 jdbc라이브러리 -->
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>5.2.6.RELEASE</version>
		</dependency>
		
		<!-- DBCP(DataBase Connection Pool) -->
		<!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
		<dependency>
		    <groupId>commons-dbcp</groupId>
		    <artifactId>commons-dbcp</artifactId>
		    <version>1.4</version>
		</dependency>
		
		<!-- 오라클용 jdbc -->
		<!-- https://mvnrepository.com/artifact/com.oracle.ojdbc/ojdbc8 -->
		<dependency>
		    <groupId>com.oracle.ojdbc</groupId>
		    <artifactId>ojdbc8</artifactId>
		    <version>19.3.0.0</version>
		</dependency>
		
		<!-- mybatis -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.5.5</version>
		</dependency>
		
		<!-- 스프링에서 mybatis를 사용할 수 있도록 할 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>2.0.5</version>
		</dependency>

=======================================
프로젝트 iot
- pom.xml에서 변경할 사항
1. 상단 properties
	> java-version 을 1.8로 변경
2. 하단 maven-compiler-plugin >
	configuration > source 와 target 버전을 1.8 로 변경
3. 상단 properties
	> org.springframework-version 버전을 5.2.8 RELEASE 로 변경

========================================
- DB 연결처리
1. db.properties 파일 생성 후
	driver, url, username, password 를 선언한다

2. Spring Bean Configuration File 을 만들어
	DBCP로 DB연결객체를 사용하기 위한 DBCP 객체,
	Mybatis를 사용하기 위한 SqlSessionFactoryBean 객체,
	쿼리문 실행을 위한 SqlSessionTemplate 객체를
	bean 태그로 등록한다.
	
3. Mapper 파일을 만들어둘 package 를 선언하고
	해당 패키지에 mapper 파일을 만들어 둔다.
	각 mapper 파일을 mapper 태그를 선언할 수 있도록
	Mapper DOCTYPE 을 선언한다.	- mybatis.org 참고(이 사이트에서 mapper 검색)


==========================================
VO를 선언할 때는 root-context.xml에 
	<context:component-scan
		base-package="employee,customer"/>	
이런식으로 선언하기(패키지 이름을 써 넣는것)
===========================================
파일 첨부 관련 컬럼 추가
alter table notice
add ( filename varchar2(300), filepath varchar2(300));


